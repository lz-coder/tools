#!/bin/sh

if [ "$EUID" -eq 0 ]
  then echo "Don't run as root!"
  exit 1
fi

VERSION=1.0
PROGNAME="lzc-mgr"

STATE_DIR="$HOME/.local/state/$PROGNAME"
TMP_DIR="$HOME/.local/tmp"
BIN_DIR="$HOME/.local/bin"

if test ! -e $STATE_DIR; then
  mkdir -p $STATE_DIR
fi
if test ! -e $BIN_DIR; then
  mkdir -p $BIN_DIR
fi
if test ! -e $TMP_DIR; then
  mkdir -p $TMP_DIR
fi

function usage() {
  echo "$PROGNAME Utility."
  echo
  echo "Usage:"
  echo " $PROGNAME COMMAND"
  echo
  echo "Commands:"
  echo " help                         Print this Help."
  echo " setup-shell                  Setup user shell."
  echo " setup-nvm                    Setup Node Version Manager"
  echo " setup-vscode-wrappers        Setup wrapper for use vscode with podman/distrobox"
  echo " setup-sudoers                Setup sudoers rules."
  echo " update-starship              Update starship prompt."
  echo " version                      Print software version and exit."
  echo
}

function write_zsh_config() {
cat >> "$HOME"/.zshrc << 'EOL'

#PATH env
export PATH=$HOME/.local/bin:$PATH

#Theme
ZSH_THEME=""

#Plugins
plugins=(git zsh-autosuggestions fast-syntax-highlighting autoupdate)

fpath+=~/.oh-my-zsh/custom/plugins/zsh-completions/src

source $ZSH/oh-my-zsh.sh

#Star Ship
eval "$(starship init zsh)"
EOL
}

function install_starship() {
  curl -Lo $TMP_DIR/starship.tar.gz "https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz"
  tar -xzf $TMP_DIR/starship.tar.gz -C $BIN_DIR
  rm -rf $TMP_DIR/starship.tar.gz
}

function update_starship() {
  if test -e $BIN_DIR/starship; then
    install_starship
    echo "Starship updated!"
  else
    echo "Starship prompt is not installed!!!"
    exit 1
  fi
}

function setup_shell() {
  if test ! -e $STATE_DIR/shell.configured && test -e /bin/zsh; then
    echo "  Configuring your shell..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions
    git clone https://github.com/TamCore/autoupdate-oh-my-zsh-plugins ~/.oh-my-zsh/custom/plugins/autoupdate
    rm -rf $HOME/.zshrc
    echo ZSH="${HOME}/.oh-my-zsh" >> "${HOME}"/.zshrc
    write_zsh_config
    install_starship
    mkdir -p $HOME/.local/share/fonts
    wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Meslo.zip -O $HOME/.local/share/fonts/Meslo.zip
    unzip $HOME/.local/share/fonts/Meslo.zip -d $HOME/.local/share/fonts/meslo-nerd
    rm -rf $HOME/.local/share/fonts/Meslo.zip
    fc-cache -f
    echo
    echo "Shell Configure, enjoy :)"
    echo
    touch $STATE_DIR/shell.configured
  else
    if test ! -e /bin/zsh; then
      echo "  ERROR: zsh not installed!"
      exit 1
    else
      echo "  Your shell is already configured!"
      echo "  remove the file: $STATE_DIR/shell.configured if you want to configure again"
      exit 1
    fi
  fi
}

function setup_sudoers() {
  if test -e $STATE_DIR/sudoers.ideapad; then
    echo "ideapad rule already configured!"
  else
    echo "%wheel ALL=(ALL) NOPASSWD: /usr/bin/tee /sys/bus/platform/drivers/ideapad_acpi/VPC????\:??/conservation_mode" | sudo tee /etc/sudoers.d/ideapad
    touch $STATE_DIR/sudoers.ideapad
  fi
}

function setup_nvm() {
  if test -e $STATE_DIR/nvm.configured; then
    echo "NVM already configured in your system."
    echo "If not you can remove $STATE_DIR/nvm.configured file."
  else
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    if test -e $STATE_DIR/shell.configured; then
      echo "NVM zsh setup"
      echo " " >> $HOME/.zshrc
      echo export NVM_DIR="$HOME/.nvm" >> $HOME/.zshrc
      echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $HOME/.zshrc
      echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> $HOME/.zshrc
    fi
    touch $STATE_DIR/nvm.configured
  fi
}

function setup_vscode_dc_wrappers() {
  if test ! -e $HOME/.local/bin/podman-host; then
    echo
    echo "Configuring podman-host wrapper"
    echo "https://github.com/89luca89/distrobox/blob/main/docs/posts/integrate_vscode_distrobox.md#third-step-podman-wrapper"
    curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/extras/podman-host -o ~/.local/bin/podman-host
    chmod +x ~/.local/bin/podman-host
    echo "podman-host wrapper configured"
    echo
  else
    echo "podman-host wrapper already configured in your system"
  fi
  if test ! -e $HOME/.local/bin/vscode-distrobox; then
    echo
    echo "Configuring vscode-distrobox wrapper"
    echo "https://github.com/89luca89/distrobox/blob/main/docs/posts/integrate_vscode_distrobox.md#open-vscode-directly-attached-to-our-distrobox"
    echo
    curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/extras/vscode-distrobox -o ~/.local/bin/vscode-distrobox
    chmod +x ~/.local/bin/vscode-distrobox
    echo "vscode-distrobox wrapper configured"
    echo
  else
    echo "vscode-distrobox wrapper already configured in your system"
  fi
  
}

while [ "$1" != "" ]; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  case $PARAM in
    help)
      usage
      exit
      ;;
    setup-shell)
      setup_shell
      exit
      ;;
    setup-sudoers)
      setup_sudoers
      exit
      ;;
    setup-nvm)
      setup_nvm
      exit
      ;;
    setup-vscode-wrappers)
      setup_vscode_dc_wrappers
      exit
      ;;
    update-starship)
      update_starship
      exit
      ;;
    version)
      echo "VERSION: $VERSION"
      ;;
    *)
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      exit 1
      ;;
  esac
  shift
done


